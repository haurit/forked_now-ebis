<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ebis.ConfigurationUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Helper class to manage Configuration [x_snc_ebis.configuration] records</description>
        <mobile_callable>false</mobile_callable>
        <name>ConfigurationUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[class ConfigurationUtil {
	static find(direction, action, tableName) {
		const grConfiguration = new global.GlideQuery('x_snc_ebis_configuration')
			.where('active', true)
			.where('direction', direction)
			.where(`action_${action}`, true)
			.where(new global.GlideQuery()
				.where('table', tableName)
				.orWhere('table_override', tableName))
			.toGlideRecord();
		grConfiguration.query();

		if (grConfiguration.next()) {
			return new ConfigurationUtil(grConfiguration);
		} else {
			return false;
		}
	}

	static getBySysId(sysID) {
		let grConfiguration = new GlideRecord('x_snc_ebis_configuration');
		
		if (grConfiguration.get(sysID)) {
			return new ConfigurationUtil(grConfiguration);
		} else {
			throw(`Could not find a configuration record with sys_id '${sysID}'.`);
		}
	}

	static getByNumber(number) {
		let grConfiguration = new GlideRecord('x_snc_ebis_configuration');
		
		if (grConfiguration.get('number', number)) {
			return new ConfigurationUtil(grConfiguration);
		} else {
			throw(`Could not find a configuration record with number '${number}'.`);
		}
	}

	static getReferenceQualifier(fieldMapSysID) {
		let grFieldMap = new GlideRecord('x_snc_ebis_field_map');
		if (grFieldMap.get(fieldMapSysID)) {
			return 'table=' + grFieldMap.getValue('table');
		} else {
			return '';
		}
	}

	constructor(grConfiguration) {
		// caching attributes below for performance
		this._sys_id = grConfiguration.getValue('sys_id');
		this._number = grConfiguration.getValue('number');
		this._tableName = grConfiguration.getValue('table');
		this._tableLabel = new GlideRecord(this._tableName).getClassDisplayValue();
		this._tableFullName = `${this._tableName} [${this._tableLabel}]`;
		this._tableOverride = grConfiguration.getValue('table_override');
		this._activeValue = global.JSUtil.getBooleanValue(grConfiguration, 'active');
		this._direction = grConfiguration.getValue('direction');
		this._delay = grConfiguration.getElement('delay').dateNumericValue(); // type GlideDuration
		this._actionConfig = {
			'insert': {
				'value': global.JSUtil.getBooleanValue(grConfiguration, 'action_insert'),
				'condition': grConfiguration.getValue('insert_condition')
			},
			'update': {
				'value': global.JSUtil.getBooleanValue(grConfiguration, 'action_update'),
				'condition': grConfiguration.getValue('update_condition')
			},
			'delete': {
				'value': global.JSUtil.getBooleanValue(grConfiguration, 'action_delete'),
				'condition': grConfiguration.getValue('delete_condition')
			}
		};
		this._options = {
			'preserve_sys_id': global.JSUtil.getBooleanValue(grConfiguration, 'preserve_sys_id'),
			'run_business_rules': global.JSUtil.getBooleanValue(grConfiguration, 'run_business_rules'),
			'ignore_unknown_fields': global.JSUtil.getBooleanValue(grConfiguration, 'ignore_unknown_fields')
		}
	}

	// event related
	getEventSuffix = action => [this._direction, action].join('.'); // linter parsing error for '=' can be safely ignored
	getEventName = action => [gs.getCurrentScopeName(), this.getEventSuffix(action)].join('.');
	getEventParm1 = () => this._tableOverride || this._tableName;
	getEventExpiration = () => {
		let dtExpiration = new GlideDateTime();
		dtExpiration.add(this._delay);

		return dtExpiration;
	}

	// table info
	getTableName     = () => this._tableName;
	getTableLabel    = () => this._tableLabel;
	getFullTableName = () => this._tableFullName;

	isActive = () => this._activeValue;
	
	getSysID = () => this._sys_id;
	getNumber = () => this._number;

	getActions(value) {
		const actionConfig = this._actionConfig;
		if (value === undefined) {
			return Object.keys(actionConfig);
		} else {
			return Object.keys(actionConfig)
				.filter(actionName => (actionConfig[actionName].value == value));
		}
	}

	getActionCondition = action => this._actionConfig[action].condition;

	getOptions = () => this._options;
	getOption = option => this._options[option];
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-04-10 12:41:46</sys_created_on>
        <sys_id>fee909244721c210cf10815a516d4392</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>ConfigurationUtil</sys_name>
        <sys_package display_value="Event Based Instance Synchronizer" source="x_snc_ebis">beaac464472d8210cf10815a516d43d9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Based Instance Synchronizer">beaac464472d8210cf10815a516d43d9</sys_scope>
        <sys_update_name>sys_script_include_fee909244721c210cf10815a516d4392</sys_update_name>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-10-18 12:32:50</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>fee909244721c210cf10815a516d4392</id>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-10-18 09:25:38</sys_created_on>
        <sys_id>fba4804a47dd9610cf10815a516d438d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-10-18 09:25:38</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
