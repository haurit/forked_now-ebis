<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ebis.InboundEventUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Process inbound EBIS events</description>
        <mobile_callable>false</mobile_callable>
        <name>InboundEventUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[class InboundEventUtil {

	process(action, tableName, payload) {
		// first check if there is a matching active configuration record, if not, we're not doing anything with the event
		const configuration = ConfigurationUtil.find('in', action, tableName);
		if (configuration) {
			const inboundObject = new FieldMapUtil(configuration.getSysID()).getInboundObject(payload);
			if (inboundObject) {
				if (action == 'insert') {
					this._insertRecord(configuration, inboundObject);
				} else if (action == 'update') {
					this._updateRecord(configuration, inboundObject);
				} else if (action == 'delete') {
					this._deleteRecord(configuration, inboundObject);
				} else {
					throw(`Unknown action '${action}' to process inbound event.`);
				}
			} else {
				throw(`Unable to initialize Field Mapping and parse payload: ${JSON.strinigfy(payload, null, 2)}.`);
			}
		} else {
			throw(`No configuration found to process inbound event '${action}' on ${tableName} table.`);
		}
	}

	_insertRecord(configuration, inboundObject) {
		let grTable = new GlideRecord(configuration.getTableName());
		grTable.addEncodedQuery(inboundObject.primary_key);
		grTable.query();
		if (grTable.next()) {
			throw(`Attempt to insert a record with primary key ${inboundObject.primary_key} that already exists (${grTable.getUniqueValue()}).`);
		}
		grTable.setWorkflow(configuration.getOption('run_business_rules'));
		let recordObject = inboundObject.record;

		if (configuration.getOption('preserve_sys_id')) {
			if (recordObject.sys_id) {
				grTable.setNewGuidValue(recordObject.sys_id);
				delete recordObject.sys_id;
			} else {
				throw('Trying to preserve the sys_id, but it is missing from the payload.');
			}
		} else {
			delete recordObject.sys_id;
		}

		Object.keys(recordObject)
			.forEach(function (field) {
				grTable.setValue(field, recordObject[field]);
			});

		return grTable.insert();
	}

	_updateRecord(configuration, inboundObject) {
		let gqTable = new global.GlideQuery.parse(configuration.getTableName(), inboundObject.primary_key);
		if (!configuration.getOption('run_business_rules')) {
			gqTable.disableWorkflow();
		}
		return gqTable.update(inboundObject.record);
	}

	_deleteRecord(configuration, inboundObject) {
		return new global.GlideQuery.parse(configuration.getTableName(), inboundObject.primary_key)
			.deleteMultiple();
	}
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-04-15 09:35:57</sys_created_on>
        <sys_id>2d5fca0247e10210cf10815a516d4393</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>InboundEventUtil</sys_name>
        <sys_package display_value="Event Based Instance Synchronizer" source="x_snc_ebis">beaac464472d8210cf10815a516d43d9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Based Instance Synchronizer">beaac464472d8210cf10815a516d43d9</sys_scope>
        <sys_update_name>sys_script_include_2d5fca0247e10210cf10815a516d4393</sys_update_name>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-10-18 12:47:45</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>2d5fca0247e10210cf10815a516d4393</id>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-10-18 12:47:45</sys_created_on>
        <sys_id>e8f2b04a4791d610cf10815a516d432e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-10-18 12:47:45</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
